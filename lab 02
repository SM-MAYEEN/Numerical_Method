
Q;find Total significant digits of a number


//     Bismillahir Rahmanir Raheem ( 'بِسْمِ ٱللَّٰهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ)
//     In the name of allah (SWT) the Merciful, the Compasionate
//     author: mayeenuddinhasan
#include <bits/stdc++.h>
using namespace std;

int fun(const char *ch) {
    int cnt = 0;
    int decimalPointFound = 0;
    int a = 0;
    int i = 0;
    if (ch[0] == '+' || ch[0] == '-') {
        i++;
    }
    while (ch[i] != '\0') {
        if (isdigit(ch[i])) {
            if (ch[i] != '0') {
                a = 1;
                cnt++;
            } else if (a || decimalPointFound) {
                cnt++;
            }
        } else if (ch[i] == '.') {
            if (!decimalPointFound) {
                decimalPointFound = 1;
            } else {
                return -1;
            }
        } else if (ch[i] == 'e' || ch[i] == 'E') {
            int j = i + 1;
            if (ch[j] == '+' || ch[j] == '-') j++;
            while (isdigit(ch[j])) {
                j++;
            }
            if (ch[j] != '\0') return -1;
            break;
        } else {
            return -1;
        }
        i++;
    }
    return cnt;
}

int main() {
    char ch[100];
     cout << "Enter a number: ";
     cin.getline(ch, sizeof(ch));
    ch[strcspn(ch, "\n")] = 0;
    int x = fun(ch);

    if (x == -1) {
         cout << "Invalid number format." <<  endl;
    } else {
         cout << "Number of significant digits: " << x <<  endl;
    }
    return 0;
}

 ///////////////////////////////////////////////////////////////////////////////////////////////////
Q;Round the number choose the point.

//     Bismillahir Rahmanir Raheem ( 'بِسْمِ ٱللَّٰهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ)
//     In the name of allah (SWT) the Merciful, the Compasionate
//     author: mayeenuddinhasan
#include <bits/stdc++.h>
using namespace std;

double bankerRound(double num, int n) {
     stringstream ss;
    ss <<  fixed <<  setprecision(50) << num;
     string s = ss.str();
    size_t point = s.find('.');
    if (point ==  string::npos) {
        return num;
    }
    if (s.length() <= point + n + 1) {
        return num;
    }
    int f = s[point + n + 1] - '0';
    int x = s[point + n] - '0';

    stringstream res;
    res << s.substr(0, point + n + 1);
    double ans =  stod(res.str());
    if (f < 5) {
        return ans;
    } else if (f > 5) {
        return  round(num *  pow(10, n)) /  pow(10, n);
    } else {
        if (x % 2 == 0) {
            return ans;
        } else {
            return  round(num *  pow(10, n)) /  pow(10, n);
        }
    }
}

int main() {
    double n;
    int decimal_point;

     cout << "Enter a number: ";
     cin >> n;

     cout << "Enter the n of decimal places to round to: ";
     cin >> decimal_point;
    double rou_num = bankerRound(n, decimal_point);
     cout << "Rounded  num: " <<  fixed <<  setprecision(decimal_point) << rou_num <<  endl;

    return 0;
}
//1.6583 → 1.658
//30.0567 → 30.06
//0.859458 → 0.8594
//3.14159 → 3.142


